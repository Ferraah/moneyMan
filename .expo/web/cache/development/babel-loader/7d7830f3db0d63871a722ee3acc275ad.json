{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Divider, List, ListItem, Text, Icon } from '@ui-kitten/components';\nimport { splitDailyData } from \"./dataHandlers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function EntriesListWithEmoji(_ref) {\n  var rawData = _ref.rawData;\n  console.log(rawData);\n\n  var renderItemEmoji = function renderItemEmoji(props) {\n    return _jsx(Icon, _objectSpread(_objectSpread({}, props), {}, {\n      name: \"person\"\n    }));\n  };\n\n  var renderItemValue = function renderItemValue(props) {\n    return _jsx(Text, {\n      children: \"+100,00 euro\"\n    });\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return _jsx(ListItem, {\n      title: item.notes,\n      description: item.date,\n      accessoryLeft: renderItemEmoji,\n      accessoryRight: renderItemValue\n    });\n  };\n\n  return _jsx(List, {\n    data: rawData,\n    ItemSeparatorComponent: Divider,\n    renderItem: renderItem\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    maxHeight: 200\n  }\n});","map":{"version":3,"sources":["/home/daniele/Programmazione/React/graph/shared/entriesListWithEmoji.js"],"names":["React","Divider","List","ListItem","Text","Icon","splitDailyData","EntriesListWithEmoji","rawData","console","log","renderItemEmoji","props","renderItemValue","renderItem","item","index","notes","date","styles","StyleSheet","create","container","maxHeight"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,IAAlC,EAAwCC,IAAxC,QAAmD,uBAAnD;AAEA,SAAQC,cAAR;;AAEA,eAAe,SAASC,oBAAT,OAAyC;AAAA,MAAVC,OAAU,QAAVA,OAAU;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,WACtB,KAAC,IAAD,kCAAUA,KAAV;AAAiB,MAAA,IAAI,EAAC;AAAtB,OADsB;AAAA,GAAxB;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACD,KAAD;AAAA,WACtB,KAAC,IAAD;AAAA;AAAA,MADsB;AAAA,GAAxB;;AAGA,MAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,QAASC,KAAT,SAASA,KAAT;AAAA,WACjB,KAAC,QAAD;AACE,MAAA,KAAK,EAAED,IAAI,CAACE,KADd;AAEE,MAAA,WAAW,EAAEF,IAAI,CAACG,IAFpB;AAGE,MAAA,aAAa,EAAEP,eAHjB;AAIE,MAAA,cAAc,EAAEE;AAJlB,MADiB;AAAA,GAAnB;;AASA,SACE,KAAC,IAAD;AACE,IAAA,IAAI,EAAEL,OADR;AAEE,IAAA,sBAAsB,EAAEP,OAF1B;AAGE,IAAA,UAAU,EAAEa;AAHd,IADF;AAQD;AAAA;AAED,IAAMK,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE;AADF;AADoB,CAAlB,CAAf","sourcesContent":["import React from \"react\";\nimport { StyleSheet } from 'react-native';\nimport { Divider, List, ListItem, Text, Icon} from '@ui-kitten/components';\n\nimport {splitDailyData} from './dataHandlers'\n\nexport default function EntriesListWithEmoji({rawData}) {\n  console.log(rawData)\n  const renderItemEmoji = (props) => (\n    <Icon {...props} name='person'/>\n  );\n\n  const renderItemValue = (props) => (\n    <Text>+100,00 euro</Text>\n  );\n  const renderItem = ({ item, index }) => (\n    <ListItem\n      title={item.notes}\n      description={item.date}\n      accessoryLeft={renderItemEmoji}\n      accessoryRight={renderItemValue}\n    />\n  );\n\n  return (\n    <List\n      data={rawData}\n      ItemSeparatorComponent={Divider}\n      renderItem={renderItem}\n\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    maxHeight: 200,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}