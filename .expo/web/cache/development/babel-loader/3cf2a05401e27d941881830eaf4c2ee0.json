{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { React, useState } from 'react';\nimport Modal from \"react-native-modal\";\nimport DatePicker from 'react-native-date-picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function ReportOverview(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var data = route.params;\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isModalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isAddingIncome = _useState6[0],\n      setAddingIncome = _useState6[1];\n\n  var toggleModal = function toggleModal(incomeButton) {\n    if (incomeButton) setAddingIncome(true);else setAddingIncome(false);\n    setModalVisible(!isModalVisible);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.bigBoldText,\n      children: data.timeSpanName\n    }), _jsx(Button, {\n      title: \"Add Expenditure\",\n      onPress: function onPress() {\n        return toggleModal(false);\n      }\n    }), _jsx(Button, {\n      title: \"Add Income\",\n      onPress: function onPress() {\n        return toggleModal(true);\n      }\n    }), _jsx(DatePickerFunction, {\n      date: date,\n      onDateChange: setDate\n    }), _jsx(ModalTester, {\n      toggleModal: toggleModal,\n      isModalVisible: isModalVisible,\n      isAddingIncome: isAddingIncome\n    }), _jsx(FlatList, {\n      data: data.rawData,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(Text, {\n          children: item.date\n        });\n      },\n      style: styles.flatlistView\n    })]\n  });\n}\n\nfunction DatePickerFunction() {\n  var _useState7 = useState(new Date()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      date = _useState8[0],\n      setDate = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      open = _useState10[0],\n      setOpen = _useState10[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Button, {\n      title: \"Open\",\n      onPress: function onPress() {\n        return setOpen(true);\n      }\n    }), _jsx(DatePicker, {\n      modal: true,\n      open: open,\n      date: date,\n      onConfirm: function onConfirm(date) {\n        setOpen(false);\n        setDate(date);\n      },\n      onCancel: function onCancel() {\n        setOpen(false);\n      }\n    })]\n  });\n}\n\nfunction ModalTester(props) {\n  var addIncomePart = _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Add an income:\"\n    }), _jsx(TextInput, {\n      placeholder: \"Insert Value\"\n    })]\n  });\n\n  var addExpenditurePart = _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Add an expenditure:\"\n    }), _jsx(TextInput, {\n      placeholder: \"Insert value\"\n    })]\n  });\n\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(Modal, {\n      isVisible: props.isModalVisible,\n      children: _jsxs(View, {\n        style: styles.modal,\n        children: [_jsx(Text, {\n          children: \"Date:\"\n        }), _jsx(TextInput, {\n          placeholder: \"Date\"\n        }), props.isAddingIncome ? addIncomePart : addExpenditurePart, _jsx(Button, {\n          title: \"Insert\",\n          onPress: props.toggleModal\n        })]\n      })\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  flatlistView: {\n    backgroundColor: 'blue',\n    marginTop: 15\n  },\n  bigBoldText: {\n    fontSize: 40,\n    fontWeight: 'bold'\n  },\n  normalText: {\n    fontSize: 20\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'pink'\n  },\n  modal: {\n    flex: 1,\n    backgroundColor: 'pink'\n  }\n});","map":{"version":3,"sources":["/home/daniele/Programmazione/React/graph/components/reportOverview.js"],"names":["React","useState","Modal","DatePicker","ReportOverview","route","navigation","data","params","Date","date","setDate","isModalVisible","setModalVisible","isAddingIncome","setAddingIncome","toggleModal","incomeButton","styles","container","bigBoldText","timeSpanName","rawData","item","flatlistView","DatePickerFunction","open","setOpen","ModalTester","props","addIncomePart","addExpenditurePart","flex","modal","StyleSheet","create","backgroundColor","marginTop","fontSize","fontWeight","normalText","justifyContent","alignItems"],"mappings":"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","sourcesContent":["\nimport {Text, StyleSheet, View, FlatList, Button, TextInput} from 'react-native'\nimport {React, useState} from 'react'\nimport Modal from \"react-native-modal\";\nimport DatePicker from 'react-native-date-picker'\n\nexport default function ReportOverview({route, navigation}){\n    const data = route.params\n    const [date, setDate] = useState(new Date())\n    const [isModalVisible, setModalVisible] = useState(false);\n    const [isAddingIncome, setAddingIncome] = useState();\n  \n    const toggleModal = (incomeButton) => {\n        if(incomeButton)\n            setAddingIncome(true);\n        else\n            setAddingIncome(false);\n\n        setModalVisible(!isModalVisible);\n    };\n  \n\n    return(\n        <View style={styles.container}>\n            <Text style={styles.bigBoldText}>{data.timeSpanName}</Text>\n            <Button title=\"Add Expenditure\" onPress={() => toggleModal(false)}/>\n            <Button title=\"Add Income\" onPress={() => toggleModal(true)}/>\n            <DatePickerFunction date={date} onDateChange={setDate} />\n\n            <ModalTester toggleModal={toggleModal} isModalVisible={isModalVisible} isAddingIncome={isAddingIncome}/>\n            <FlatList\n            data={data.rawData}\n            renderItem={({item}) => (\n                <Text>{item.date}</Text>\n            )}\n            style={styles.flatlistView}\n        />\n        </View>\n\n    );\n}\n\n\nfunction DatePickerFunction() {\n    const [date, setDate] = useState(new Date())\n    const [open, setOpen] = useState(false)\n  \n    return (\n      <>\n        <Button title=\"Open\" onPress={() => setOpen(true)} />\n        <DatePicker\n          modal\n          open={open}\n          date={date}\n          onConfirm={(date) => {\n            setOpen(false)\n            setDate(date)\n          }}\n          onCancel={() => {\n            setOpen(false)\n          }}\n        />\n      </>\n    )\n}\n\nfunction ModalTester(props) {\n    \n\n    const addIncomePart = \n        <View>\n            <Text>Add an income:</Text>\n            <TextInput placeholder='Insert Value'></TextInput>\n        </View>\n    \n\n    const addExpenditurePart = \n        <View>\n            <Text>Add an expenditure:</Text>\n            <TextInput placeholder='Insert value'></TextInput>\n        </View>\n\n    return (\n      <View style={{ flex: 1 }}>  \n        <Modal isVisible={props.isModalVisible}>\n          <View style={styles.modal}>\n            <Text>Date:</Text>\n            <TextInput placeholder='Date'></TextInput>\n            { props.isAddingIncome ? addIncomePart : addExpenditurePart}\n            <Button title=\"Insert\" onPress={props.toggleModal} />\n          </View>\n        </Modal>\n      </View>\n    );\n  }\n  \nconst styles = StyleSheet.create({\n    flatlistView: {\n        backgroundColor: 'blue',\n        marginTop: 15,\n        \n    },\n    bigBoldText: {\n        fontSize: 40,\n        fontWeight: 'bold',\n    },\n    normalText: {\n        fontSize: 20\n    },\n    container:{\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'pink'\n    },\n    modal:{\n        flex: 1,\n        backgroundColor: 'pink'\n    }\n});"]},"metadata":{},"sourceType":"module"}