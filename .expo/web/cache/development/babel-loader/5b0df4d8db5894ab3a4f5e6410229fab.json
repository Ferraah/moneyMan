{"ast":null,"code":"export function filterMonthly(yearlyData) {\n  var filteredDataObjects = [];\n  var tmp = [];\n  var graphTriplet = null;\n  var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  months.forEach(function (month) {\n    yearlyData.forEach(function (element) {\n      if (element.date.includes(month)) {\n        tmp.push(element);\n      }\n    });\n    graphTriplet = null;\n\n    if (tmp.length > 0) {\n      graphTriplet = calculateTripletTotal(tmp);\n      filteredDataObjects.push({\n        timeSpanMode: \"MONTHLY\",\n        timeSpanName: month,\n        tripletTotal: graphTriplet,\n        rawData: splitDailyData(tmp)\n      });\n    }\n\n    tmp = [];\n  });\n  return filteredDataObjects;\n}\n\nfunction splitDailyData(data) {\n  var newData = [];\n  data.forEach(function (dailyObject) {\n    dailyObject.expenses.forEach(function (element) {\n      newData.push({\n        date: dailyObject.date,\n        notes: element.notes,\n        singleExpense: element.value\n      });\n    });\n    dailyObject.incomes.forEach(function (element) {\n      newData.push({\n        date: dailyObject.date,\n        notes: element.notes,\n        singleIncome: element.value\n      });\n    });\n  });\n  return newData;\n}\n\nfunction calculateTripletTotal(data) {\n  var incomes = 0,\n      expenses = 0,\n      profit;\n  data.forEach(function (dailyData) {\n    dailyData.incomes.forEach(function (element) {\n      incomes += element.value;\n    });\n    dailyData.expenses.forEach(function (element) {\n      expenses += element.value;\n    });\n  });\n  profit = incomes - expenses;\n  return {\n    incomes: incomes,\n    expenses: expenses,\n    profit: profit\n  };\n}","map":{"version":3,"sources":["/home/daniele/Programmazione/React/graph/shared/dataHandlers.js"],"names":["filterMonthly","yearlyData","filteredDataObjects","tmp","graphTriplet","months","forEach","month","element","date","includes","push","length","calculateTripletTotal","timeSpanMode","timeSpanName","tripletTotal","rawData","splitDailyData","data","newData","dailyObject","expenses","notes","singleExpense","value","incomes","singleIncome","profit","dailyData"],"mappings":"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","sourcesContent":["\n\n// DATA HANDLERS \n\nexport function filterMonthly(yearlyData){\n    var filteredDataObjects = []\n    var tmp = [];\n    var graphTriplet = null;\n\n    const months= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n            \"August\",\"September\",\"October\",\"November\",\"December\"];\n        \n        \n    months.forEach(month => {\n        yearlyData.forEach(element => {\n            \n            if(element.date.includes(month)){\n                tmp.push(element);\n            }\n            \n        });\n\n        graphTriplet = null;\n        if(tmp.length > 0){\n            graphTriplet = calculateTripletTotal(tmp);\n            filteredDataObjects.push({\n                // MONTHLY\n                timeSpanMode: \"MONTHLY\",\n                // January, February ... December\n                timeSpanName: month,\n                // Triplet including Incomes, expenditures and profits\n                tripletTotal: graphTriplet,\n                // Every daily object, splitted (more info in splitDailyData declaration)\n                rawData: splitDailyData(tmp)\n            })\n\n        }\n\n\n\n        tmp = [];\n\n    });\n\n    \n    return filteredDataObjects;\n}\n\n\n// DailyObjecty has various expenses and incomes inserted over the day. \n// This create an object for each entry during the day\nfunction splitDailyData(data){\n    var newData = [];\n    \n\n    data.forEach(dailyObject => {\n\n        dailyObject.expenses.forEach(element => {\n            newData.push({\n                date: dailyObject.date,\n                notes: element.notes,\n                singleExpense: element.value\n            })\n        });\n\n        dailyObject.incomes.forEach(element => {\n            newData.push({\n                date: dailyObject.date,\n                notes: element.notes,\n                singleIncome: element.value\n            })\n        });\n    });\n    return newData;\n}\n\n\n// Calculate incomes, expenses and profit to draw graphs.\nfunction calculateTripletTotal(data){\n    var incomes = 0, expenses = 0, profit;\n    data.forEach(dailyData => {\n        dailyData.incomes.forEach(element => {\n            incomes += element.value;\n        });\n        dailyData.expenses.forEach(element => {\n            expenses += element.value;\n        });\n    });\n\n    profit = incomes - expenses;\n\n    return {\n        incomes: incomes,\n        expenses: expenses,\n        profit: profit\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}