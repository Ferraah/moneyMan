{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { React, useState } from 'react';\nimport Modal from \"react-native-modal\";\nimport DatePicker from \"../shared/datePicker\";\nimport DataList from \"./dataList\";\nimport AppLoading from 'expo-app-loading';\nimport { Poppins_400Regular, useFonts } from '@expo-google-fonts/poppins';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ReportOverview(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var data = route.params;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isModalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAddingIncome = _useState4[0],\n      setAddingIncome = _useState4[1];\n\n  var _useFonts = useFonts({\n    Poppins_400Regular: Poppins_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 2),\n      fontsLoaded = _useFonts2[0],\n      error = _useFonts2[1];\n\n  var toggleModal = function toggleModal(incomeButton) {\n    if (incomeButton) setAddingIncome(true);else setAddingIncome(false);\n    setModalVisible(!isModalVisible);\n  };\n\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  } else {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: styles.monthLabel,\n        children: _jsx(Text, {\n          style: styles.normalText,\n          children: data.timeSpanName\n        })\n      }), _jsx(Text, {\n        style: styles.normalBoldText,\n        children: \"Incomes:\"\n      }), _jsx(Text, {\n        style: styles.bigBoldText,\n        children: \"100,0\"\n      }), _jsx(Button, {\n        title: \"Add Expense\",\n        onPress: function onPress() {\n          return toggleModal(false);\n        }\n      }), _jsx(Button, {\n        title: \"Add Income\",\n        onPress: function onPress() {\n          return toggleModal(true);\n        }\n      }), _jsx(ModalTester, {\n        toggleModal: toggleModal,\n        isModalVisible: isModalVisible,\n        isAddingIncome: isAddingIncome\n      }), _jsx(DataList, {\n        rawData: data.rawData\n      })]\n    });\n  }\n}\n\nfunction ModalTester(props) {\n  var _useState5 = useState(new Date()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showDatePicker = _useState8[0],\n      setShowDatePicker = _useState8[1];\n\n  var addIncomePart = _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.mediumBoldText,\n      children: \"Add an income:\"\n    }), _jsx(TextInput, {\n      style: styles.normalText,\n      placeholder: \"Insert Value\"\n    })]\n  });\n\n  var addExpensesPart = _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.mediumBoldText,\n      children: \"Add an expense:\"\n    }), _jsx(TextInput, {\n      style: styles.normalText,\n      placeholder: \"Insert value\"\n    })]\n  });\n\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Modal, {\n      style: styles.modal,\n      isVisible: props.isModalVisible,\n      children: _jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.mediumBoldText,\n          children: \"Date:\"\n        }), _jsxs(View, {\n          style: styles.dateAndButtonView,\n          children: [_jsx(View, {\n            style: styles.date,\n            children: _jsx(Text, {\n              style: styles.normalText,\n              children: date.toLocaleDateString()\n            })\n          }), _jsx(View, {\n            style: styles.changeButton,\n            children: _jsx(Button, {\n              title: \"CHANGE\",\n              onPress: function onPress() {\n                return setShowDatePicker(true);\n              }\n            })\n          })]\n        }), _jsx(DatePicker, {\n          date: date,\n          setDate: setDate,\n          show: showDatePicker,\n          setShow: setShowDatePicker\n        }), _jsx(View, {\n          style: styles.valueView,\n          children: props.isAddingIncome ? addIncomePart : addExpensesPart\n        }), _jsx(Button, {\n          style: styles.insertButton,\n          title: \"Insert\",\n          onPress: props.toggleModal\n        })]\n      })\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  monthLabel: {\n    marginRight: 'auto',\n    marginLeft: 20,\n    marginVertical: 20\n  },\n  bigBoldText: {\n    fontSize: 40,\n    fontWeight: 'bold'\n  },\n  mediumBoldText: {\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  normalText: {\n    fontSize: 20,\n    fontFamily: 'Poppins_400Regular'\n  },\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'pink'\n  },\n  modal: {\n    padding: 30,\n    flex: 0,\n    backgroundColor: 'white'\n  },\n  dateAndButtonView: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  changeButton: {\n    flex: 1,\n    marginLeft: 100\n  },\n  date: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  valueView: {\n    marginTop: 20\n  },\n  insertButton: {\n    marginTop: 40\n  }\n});","map":{"version":3,"sources":["/home/daniele/Programmazione/React/graph/components/reportOverview.js"],"names":["React","useState","Modal","DatePicker","DataList","AppLoading","Poppins_400Regular","useFonts","ReportOverview","route","navigation","data","params","isModalVisible","setModalVisible","isAddingIncome","setAddingIncome","fontsLoaded","error","toggleModal","incomeButton","styles","container","monthLabel","normalText","timeSpanName","normalBoldText","bigBoldText","rawData","ModalTester","props","Date","date","setDate","showDatePicker","setShowDatePicker","addIncomePart","mediumBoldText","addExpensesPart","flex","justifyContent","alignItems","modal","dateAndButtonView","toLocaleDateString","changeButton","valueView","insertButton","StyleSheet","create","marginRight","marginLeft","marginVertical","fontSize","fontWeight","fontFamily","backgroundColor","padding","flexDirection","marginTop"],"mappings":"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","sourcesContent":["\nimport {Text, StyleSheet, View, FlatList, Button, TextInput} from 'react-native'\nimport {React, useState} from 'react'\nimport Modal from \"react-native-modal\";\nimport DatePicker from '../shared/datePicker';\nimport DataList from './dataList';\n\nimport AppLoading from 'expo-app-loading';\nimport { Poppins_400Regular, useFonts } from '@expo-google-fonts/poppins'\n\nexport default function ReportOverview({route, navigation}){\n    const data = route.params\n    const [isModalVisible, setModalVisible] = useState(false);\n    const [isAddingIncome, setAddingIncome] = useState();\n  \n\n    /* FONTS LOADING */\n    let [fontsLoaded, error] = useFonts({\n        Poppins_400Regular\n      });\n    \n\n\n      \n    const toggleModal = (incomeButton) => {\n        if(incomeButton)\n            setAddingIncome(true);\n        else\n            setAddingIncome(false);\n\n        setModalVisible(!isModalVisible);\n    };\n\n    if (!fontsLoaded) {\n        return (\n            <AppLoading/>\n        );\n    }else{\n        return(\n            <View style={styles.container}>\n                <View style={styles.monthLabel}>\n                    <Text style={styles.normalText}>{data.timeSpanName}</Text>\n                </View>\n                <Text style={styles.normalBoldText}>Incomes:</Text>\n                <Text style={styles.bigBoldText}>100,0</Text>\n    \n                <Button title=\"Add Expense\" onPress={() => toggleModal(false)}/>\n                <Button title=\"Add Income\" onPress={() => toggleModal(true)}/>\n                <ModalTester toggleModal={toggleModal} isModalVisible={isModalVisible} isAddingIncome={isAddingIncome}/>\n                <DataList rawData={data.rawData}/>\n            </View>\n        );\n    }\n\n}\n\n\nfunction ModalTester(props) {\n    const [date, setDate] = useState(new Date());\n    const [showDatePicker, setShowDatePicker] = useState(false);\n\n    const addIncomePart = \n        <View>\n            <Text style={styles.mediumBoldText}>Add an income:</Text>\n            <TextInput style={styles.normalText} placeholder='Insert Value'></TextInput>\n        </View>\n    \n\n    const addExpensesPart = \n        <View>\n            <Text style={styles.mediumBoldText}>Add an expense:</Text>\n            <TextInput style={styles.normalText} placeholder='Insert value'></TextInput>\n        </View>\n\n    return (\n      <View style={{flex:1, justifyContent: 'center', alignItems: 'center'}}>  \n        <Modal style={styles.modal} isVisible={props.isModalVisible}>\n          <View >\n            <Text style={styles.mediumBoldText}>Date:</Text>\n\n            <View style={styles.dateAndButtonView}>\n                \n                <View style={styles.date}>\n                    <Text style={styles.normalText}>{date.toLocaleDateString()}</Text>            \n                </View>\n\n                <View  style={styles.changeButton}>\n                    <Button title='CHANGE' onPress={() => setShowDatePicker(true)}/>\n                </View>\n\n            </View>\n\n            <DatePicker date={date} setDate={setDate} show={showDatePicker} setShow={setShowDatePicker}/>\n            \n            <View style={styles.valueView}>\n\n                { props.isAddingIncome ? addIncomePart : addExpensesPart}\n\n            </View>\n            {/* Sistemare altezza */}\n            <Button style={styles.insertButton} title=\"Insert\" onPress={props.toggleModal} />\n\n\n\n          </View>\n        </Modal>\n      </View>\n    );\n  }\n  \nconst styles = StyleSheet.create({\n\n    monthLabel:{\n        marginRight: 'auto',\n        marginLeft: 20,\n        marginVertical: 20    \n    },\n    bigBoldText: {\n        fontSize: 40,\n        fontWeight: 'bold',\n    },\n    mediumBoldText: {\n        fontSize: 30,\n        fontWeight: 'bold',\n    },\n    normalText: {\n        fontSize: 20,\n        fontFamily: 'Poppins_400Regular'\n    },\n    container:{\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'pink'\n    },\n    modal:{\n        padding: 30,\n        flex: 0,\n        backgroundColor: 'white',\n\n    },\n    dateAndButtonView:{\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        /*backgroundColor: 'red'        */\n\n    },\n    changeButton: {\n        flex: 1,\n        marginLeft: 100,\n    },\n    date:{\n        flex: 1,\n        justifyContent: 'center',\n        /*backgroundColor: 'blue'*/\n    },\n    valueView:{\n        marginTop: 20,\n        \n    },\n    insertButton:{\n        marginTop: 40\n    }\n\n\n});"]},"metadata":{},"sourceType":"module"}