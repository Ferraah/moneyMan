{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firestore from '@react-native-firebase/firestore';\nimport React, { Component } from 'react';\nimport { db } from \"./firebaseInfo\";\nimport { collection, getDocs, doc, query } from 'firebase/firestore';\nexport default function getData() {\n  var q, querySnapshot;\n  return _regeneratorRuntime.async(function getData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          q = query(collection(db, \"Users/Zeta/Reports\"));\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getDocs(q));\n\n        case 3:\n          querySnapshot = _context.sent;\n          querySnapshot.forEach(function (doc) {\n            console.log(doc.id, \" => \", doc.data()['Incassi']);\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/daniele/Programmazione/React/graph/firebase/getData.js"],"names":["firestore","React","Component","db","collection","getDocs","doc","query","getData","q","querySnapshot","forEach","console","log","id","data"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,kCAAtB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,EAAR;AACA,SAAQC,UAAR,EAAoBC,OAApB,EAA6BC,GAA7B,EAAkCC,KAAlC,QAA8C,oBAA9C;AAqBA,eAAe,SAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAcLC,UAAAA,CAdK,GAcDF,KAAK,CAACH,UAAU,CAACD,EAAD,EAAK,oBAAL,CAAX,CAdJ;AAAA;AAAA,2CAeiBE,OAAO,CAACI,CAAD,CAfxB;;AAAA;AAeLC,UAAAA,aAfK;AAgBXA,UAAAA,aAAa,CAACC,OAAd,CAAsB,UAACL,GAAD,EAAS;AAE3BM,YAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACQ,EAAhB,EAAoB,MAApB,EAA4BR,GAAG,CAACS,IAAJ,GAAW,SAAX,CAA5B;AACH,WAHD;;AAhBW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import firestore from '@react-native-firebase/firestore'\nimport React, {Component} from 'react'\n\nimport {db} from './firebaseInfo'\nimport {collection, getDocs, doc, query} from 'firebase/firestore'\n\n/*\nclass Firebase extends Component{\n\n    constructor(props){\n        super(props);\n        this.getUser();\n        this.subscriber = firestore().collection(\"Daniele\").doc\n        ('N5CAEQZq3T2LifobBdgx').onSnapshot(doc=>{\n            this.setState({\n                data:{}\n            })\n        })\n    }\n\n\n}*/\n\n\n\nexport default async function getData(){\n    /*const docRef = db.collection('Users').doc('Zeta');\n\n    docRef.get().then((doc) => {\n        if (doc.exists) {\n            console.log(\"Document data:\", doc.data());\n        } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n        }\n    }).catch((error) => {\n        console.log(\"Error getting document:\", error);\n    });*/\n\n    const q = query(collection(db, \"Users/Zeta/Reports\"))\n    const querySnapshot = await getDocs(q);\n    querySnapshot.forEach((doc) => {\n    // doc.data() is never undefined for query doc snapshots\n        console.log(doc.id, \" => \", doc.data()['Incassi']);\n    });\n\n\n/*\n    const docRef = doc(db, \"Users/Zeta/Reports\", \"BZltMgqgO9aCaikQRRz6\");\n    const docSnap = await getDoc(docRef);\n\n    if (docSnap.exists()) {\n    console.log(\"Document data:\", docSnap.data());\n    } else {\n    // doc.data() will be undefined in this case\n    console.log(\"No such document!\");\n    }\n*/\n\n} "]},"metadata":{},"sourceType":"module"}